
**1. Total Number of Lockers Across Buildings**

SELECT COUNT(*) AS total_lockers 
FROM lockers;


## 2. Locker Breakdown per Building 

SELECT buildings.building_name, COUNT(lockers.id) AS total_lockers 
FROM lockers 
JOIN buildings ON lockers.building_id = buildings.id
GROUP BY buildings.building_name;

## 3. Total Lockers Assigned vs. Available

SELECT 
    COUNT(CASE WHEN lockers.assigned_user_id IS NULL THEN 1 END) AS available_lockers,
    COUNT(CASE WHEN lockers.assigned_user_id IS NOT NULL THEN 1 END) AS assigned_lockers
FROM lockers;

## 4. Student-wise Locker Agreement Report

SELECT 
    users.full_name AS student_name, lockers.locker_number, 
    buildings.building_name, lockers.floor, lockers.section
FROM lockers
JOIN users ON lockers.assigned_user_id = users.id
JOIN buildings ON lockers.building_id = buildings.id
WHERE users.role = 'student';

## 5. Numbers of Users in Each Role

SELECT role, COUNT(*) AS user_count 
FROM users
GROUP BY role;

## 6.  Lockers Assigned Per Grade Level  

SELECT grade_levels.name AS grade_level, COUNT(lockers.id) AS assigned_lockers
FROM lockers
JOIN users ON lockers.assigned_user_id = users.id
JOIN grade_levels ON users.grade_level_id = grade_levels.id
GROUP BY grade_levels.name;

## 7. Frequently Used Lockers By Teachers

SELECT 
    users.full_name AS teacher_name, COUNT(lockers.id) AS locker_assignments
FROM lockers
JOIN users ON lockers.assigned_by_user_id = users.id
WHERE users.role = 'teacher'
GROUP BY users.full_name
ORDER BY COUNT(lockers.id) DESC
LIMIT 10;

## 8.  Building Utilization (Percentage of Assigned Lockers Per Building

SELECT 
    buildings.building_name,
    ROUND(100.0 * SUM(CASE WHEN lockers.assigned_user_id IS NOT NULL THEN 1 ELSE 0 END) / COUNT(lockers.id), 2) AS utilization_percentage
FROM lockers
JOIN buildings ON lockers.building_id = buildings.id
GROUP BY buildings.building_name;

## 9.  Recently Added Lockers

SELECT * 
FROM lockers
ORDER BY created_at DESC 
LIMIT 10;


## 10.  Domain-wise User Registration

SELECT 
    SUBSTRING_INDEX(email, '@', -1) AS domain,
    COUNT(*) AS user_count
FROM users
GROUP BY domain
ORDER BY user_count DESC
LIMIT 5;














