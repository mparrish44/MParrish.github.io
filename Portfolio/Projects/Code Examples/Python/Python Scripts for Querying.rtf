1.  Generate Locker Utilization Chart

import matplotlib.pyplot as plt
import sqlite3


def locker_utilization_chart(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT buildings.building_name,
               ROUND(100.0 * SUM(CASE WHEN lockers.assigned_user_id IS NOT NULL THEN 1 ELSE 0 END) / COUNT(lockers.id), 2) AS utilization
        FROM lockers
        JOIN buildings ON lockers.building_id = buildings.id
        GROUP BY buildings.building_name;
    ''')
    data = cursor.fetchall()

    building_names = [row[0] for row in data]
    utilization = [row[1] for row in data]

    plt.figure(figsize=(10, 6))
    plt.bar(building_names, utilization, color='skyblue')
    plt.title('Locker Utilization by Building')
    plt.xlabel('Building Name')
    plt.ylabel('Utilization (%)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    conn.close()


2.  User Role Distribution Pie Chart

def user_role_distribution(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT role, COUNT(*) FROM users GROUP BY role;
    ''')
    data = cursor.fetchall()

    roles = [row[0] for row in data]
    counts = [row[1] for row in data]

    plt.figure(figsize=(8, 8))
    plt.pie(counts, labels=roles, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
    plt.title('User Role Distribution')
    plt.tight_layout()
    plt.show()

    conn.close()

3.  Top 10 Teachers by Locker Assignments

def top_teachers_by_assignment(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT users.full_name AS teacher_name, COUNT(lockers.id) AS assignments
        FROM lockers
        JOIN users ON lockers.assigned_by_user_id = users.id
        WHERE users.role = 'teacher'
        GROUP BY users.full_name
        ORDER BY assignments DESC
        LIMIT 10;
    ''')
    data = cursor.fetchall()

    teacher_names = [row[0] for row in data]
    assignments = [row[1] for row in data]

    plt.figure(figsize=(10, 6))
    plt.barh(teacher_names, assignments, color='teal')
    plt.title('Top 10 Teachers by Locker Assignments')
    plt.xlabel('Number of Assignments')
    plt.ylabel('Teacher Name')
    plt.gca().invert_yaxis()
    plt.tight_layout()
    plt.show()

    conn.close()

4.  Grade-Level Locker Breakdown

def grade_level_locker_breakdown(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT grade_levels.name AS grade_level, COUNT(lockers.id) AS assigned_lockers
        FROM lockers
        JOIN users ON lockers.assigned_user_id = users.id
        JOIN grade_levels ON users.grade_level_id = grade_levels.id
        GROUP BY grade_levels.name;
    ''')
    data = cursor.fetchall()

    grade_levels = [row[0] for row in data]
    locker_counts = [row[1] for row in data]

    plt.figure(figsize=(10, 6))
    plt.bar(grade_levels, locker_counts, color='orange')
    plt.title('Locker Assignments by Grade Level')
    plt.xlabel('Grade Level')
    plt.ylabel('Number of Assigned Lockers')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    conn.close()

5.  Recent Locker Assignments Table

def recent_locker_assignments(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT users.full_name, lockers.locker_number, buildings.building_name, lockers.floor, lockers.section
        FROM lockers
        JOIN users ON lockers.assigned_user_id = users.id
        JOIN buildings ON lockers.building_id = buildings.id
        ORDER BY lockers.updated_at DESC
        LIMIT 10;
    ''')
    data = cursor.fetchall()

    print(f"{'Student Name':<20} {'Locker Number':<15} {'Building':<15} {'Floor':<10} {'Section':<10}")
    print("-" * 70)
    for row in data:
        print(f"{row[0]:<20} {row[1]:<15} {row[2]:<15} {row[3]:<10} {row[4]:<10}")

    conn.close()





